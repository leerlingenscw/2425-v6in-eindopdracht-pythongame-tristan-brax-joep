import pygame
import random

# Initialize pygame
pygame.init()

# Constants
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
FPS = 60
GRAVITY = 0.8
JUMP_STRENGTH = -15
PLATFORM_WIDTH = 100
PLATFORM_HEIGHT = 10

# Colors
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)

# Set up the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Doodle Jump Lookalike")

# Clock
clock = pygame.time.Clock()

# Player class
class Player(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.Surface((50, 50))
        self.image.fill(BLUE)
        self.rect = self.image.get_rect()
        self.rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT - 50)
        self.velocity = 0

    def update(self):
        # Apply gravity
        self.velocity += GRAVITY
        self.rect.y += self.velocity

        # Prevent going off screen
        if self.rect.y > SCREEN_HEIGHT - 50:
            self.rect.y = SCREEN_HEIGHT - 50
            self.velocity = 0

        # Move player with arrow keys
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and self.rect.left > 0:
            self.rect.x -= 5
        if keys[pygame.K_RIGHT] and self.rect.right < SCREEN_WIDTH:
            self.rect.x += 5

    def jump(self):
        if self.velocity == 0:  # Only jump when standing on the ground
            self.velocity = JUMP_STRENGTH

# Platform class
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((PLATFORM_WIDTH, PLATFORM_HEIGHT))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

# Set up groups
all_sprites = pygame.sprite.Group()
platforms = pygame.sprite.Group()

# Create player
player = Player()
all_sprites.add(player)

# Create initial platforms
for i in range(5):
    x = random.randint(0, SCREEN_WIDTH - PLATFORM_WIDTH)
    y = random.randint(50, SCREEN_HEIGHT - 100)
    platform = Platform(x, y)
    all_sprites.add(platform)
    platforms.add(platform)

# Game loop
running = True
while running:
    clock.tick(FPS)

    # Handle events
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Update
    all_sprites.update()

    # Check for collision with platforms
    if pygame.sprite.spritecollide(player, platforms, False):
        for platform in platforms:
            if player.rect.colliderect(platform.rect) and player.velocity >= 0:
                player.velocity = JUMP_STRENGTH  # Jump when colliding with platform

    # Scroll the platforms and player
    if player.rect.top <= SCREEN_HEIGHT // 4:
        for platform in platforms:
            platform.rect.y += abs(player.velocity)  # Move platforms down
        player.rect.y = SCREEN_HEIGHT // 4  # Keep player in place

        # Create new platforms
        if platforms.sprites()[-1].rect.y > 0:
            x = random.randint(0, SCREEN_WIDTH - PLATFORM_WIDTH)
            y = -PLATFORM_HEIGHT
            new_platform = Platform(x, y)
            all_sprites.add(new_platform)
            platforms.add(new_platform)

    # Draw everything
    screen.fill(WHITE)
    all_sprites.draw(screen)

    # Update the screen
    pygame.display.flip()

# Quit pygame
pygame.quit()